generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  username         String             @unique
  password         String?
  lname            String?
  fname            String?
  active           Boolean?           @default(true)
  departmentId     Int?
  positionId       Int?
  roleId           Int?               @default(1)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  point            Int?               @default(0)
  imgUrl           String?
  buttonLinkId     Int?
  Booking          Booking[]
  Content          Content[]
  PointPay         PointPay[]
  PointReceived    PointReceived[]
  PointReceivedPay PointReceivedPay[]
  Reward           Reward[]
  ButtonLink       ButtonLink?        @relation(fields: [buttonLinkId], references: [id])
  Department       Department?        @relation(fields: [departmentId], references: [id])
  Position         Position?          @relation(fields: [positionId], references: [id])
  Role             Role?              @relation(fields: [roleId], references: [id])
}

model Role {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Department {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Position {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Booking {
  id                Int             @id @default(autoincrement())
  start             DateTime?
  end               DateTime?
  name              String?
  color             String?
  timed             Boolean?        @default(true)
  url               String?
  description       String?
  chairman          String?
  quantity          Int?
  meetingId         String?
  meetingPassword   String?
  UserId            Int?
  ApproveBy         Int?
  MeetingTypeId     Int?
  RoomId            Int?
  ProgramId         Int?
  StatusId          Int?            @default(1)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  authorPhoneNumber String?         @db.NVarChar(250)
  MeetingType       MeetingType?    @relation(fields: [MeetingTypeId], references: [id])
  Program           Program?        @relation(fields: [ProgramId], references: [id])
  Room              Room?           @relation(fields: [RoomId], references: [id])
  Status            Status?         @relation(fields: [StatusId], references: [id])
  User              User?           @relation(fields: [UserId], references: [id])
  BookingDevice     BookingDevice[]
  BookingDrink      BookingDrink[]
  BookingFood       BookingFood[]
}

model Program {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model Status {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model MeetingType {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model BookingDevice {
  BookingId Int
  DeviceId  Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Device    Device  @relation(fields: [DeviceId], references: [id])

  @@id([BookingId, DeviceId])
}

model BookingFood {
  BookingId Int
  FoodId    Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Food      Food    @relation(fields: [FoodId], references: [id])

  @@id([BookingId, FoodId])
}

model BookingDrink {
  BookingId Int
  DrinkId   Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Drink     Drink   @relation(fields: [DrinkId], references: [id])

  @@id([BookingId, DrinkId])
}

model Room {
  id       Int       @id @default(autoincrement())
  name     String?
  quantity Int?
  color    String?
  Booking  Booking[]
}

model Device {
  id      Int             @id @default(autoincrement())
  name    String?
  Booking BookingDevice[]
}

model Food {
  id      Int           @id @default(autoincrement())
  name    String?
  Booking BookingFood[]
}

model Drink {
  id      Int            @id @default(autoincrement())
  name    String?
  Booking BookingDrink[]
}

model Content {
  id              Int             @id @default(autoincrement())
  ticket          String          @unique
  code            String          @unique
  title           String?
  description     String?
  detail          String?
  point           Int?            @default(0)
  userId          Int?
  contentTypeId   Int?
  contentStatusId Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  active          Boolean?        @default(true)
  ContentStatus   ContentStatus?  @relation(fields: [contentStatusId], references: [id])
  ContentType     ContentType?    @relation(fields: [contentTypeId], references: [id])
  author          User?           @relation(fields: [userId], references: [id])
  ContentImg      ContentImg[]
  PointPay        PointPay[]
  PointReceived   PointReceived[]
}

model ContentView {
  id        Int       @id @default(autoincrement())
  start     DateTime?
  end       DateTime?
  timed     Boolean?  @default(true)
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  active    Boolean?  @default(true)
  publish   Boolean?  @default(false)
}

model ContentType {
  id        Int       @id @default(autoincrement())
  name      String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  active    Boolean?  @default(true)
  Content   Content[]
}

model ContentImg {
  id        Int      @id @default(autoincrement())
  path      String?
  name      String?
  contentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean? @default(true)
  Content   Content? @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ContentStatus {
  id        Int       @id @default(autoincrement())
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  active    Boolean?  @default(true)
  Content   Content[]
}

model PointReceived {
  id               Int                @id @default(autoincrement())
  ticket           String             @unique
  point            Int?               @default(0)
  contentId        Int?
  userId           Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  active           Boolean?           @default(true)
  Content          Content?           @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User             User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointReceivedPay PointReceivedPay[]
}

model PointPay {
  id               Int                @id @default(autoincrement())
  ticket           String             @unique
  point            Int?               @default(0)
  approve          Boolean?           @default(false)
  userId           Int?
  contentId        Int?
  rewardId         Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  active           Boolean?           @default(true)
  Content          Content?           @relation(fields: [contentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User             User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointReceivedPay PointReceivedPay[]
}

model PointReceivedPay {
  id              Int            @id @default(autoincrement())
  date            DateTime?
  ticketReceived  String?
  ticketPay       String?
  pointReceived   Int?
  pointPay        Int?
  pointTotal      Int?
  userId          Int?
  pointReceivedId Int?
  pointPayId      Int?
  rewardId        Int?
  PointPay        PointPay?      @relation(fields: [pointPayId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointReceived   PointReceived? @relation(fields: [pointReceivedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User            User?          @relation(fields: [userId], references: [id])
}

model Reward {
  id          Int         @id @default(autoincrement())
  ticket      String      @unique
  name        String?
  description String?
  point       Int?        @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  active      Boolean?    @default(true)
  userId      Int?
  author      User?       @relation(fields: [userId], references: [id])
  RewardImg   RewardImg[]
}

model RewardImg {
  id             Int      @id @default(autoincrement())
  url            String?
  path           String?
  name           String?
  rewardId       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  active         Boolean? @default(true)
  Reward         Reward?  @relation(fields: [rewardId], references: [id])
  RewardImgIndex Boolean? @default(false)
}

model ButtonLink {
  id        Int      @id @default(autoincrement())
  ticket    String   @unique
  remark    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean? @default(true)
  User      User[]
}
