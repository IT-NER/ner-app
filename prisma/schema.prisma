generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  username         String             @unique
  password         String?
  lname            String?
  fname            String?
  active           Boolean?           @default(true)
  point            Int?               @default(0)
  imgUrl           String?
  Booking          Booking[]
  Content          Content[]
  PointPay         PointPay[]
  PointReceived    PointReceived[]
  PointReceivedPay PointReceivedPay[]
  Reward           Reward[]
  ContentPublic    ContentPublic[]
  PointPayRequest  PointPayRequest[]
  buttonLinkId     Int?
  departmentId     Int?
  positionId       Int?
  roleId           Int?               @default(1)
  ButtonLink       ButtonLink?        @relation(fields: [buttonLinkId], references: [id])
  Department       Department?        @relation(fields: [departmentId], references: [id])
  Position         Position?          @relation(fields: [positionId], references: [id])
  Role             Role?              @relation(fields: [roleId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model Content {
  id              Int             @id @default(autoincrement())
  ticket          String          @unique
  code            String?
  title           String?
  description     String?
  detail          String?         @db.VarChar(8000)
  point           Int?            @default(0)
  active          Boolean?        @default(true)
  ContentImg      ContentImg[]
  ContentPublic   ContentPublic[]
  contentStatusId Int?
  contentTypeId   Int?
  userId          Int?
  ContentStatus   ContentStatus?  @relation(fields: [contentStatusId], references: [id])
  ContentType     ContentType?    @relation(fields: [contentTypeId], references: [id])
  User            User?           @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ContentPublic {
  id            Int             @id @default(autoincrement())
  ticket        String          @unique
  start         DateTime?
  end           DateTime?
  timed         Boolean?        @default(true)
  remark        String?
  active        Boolean?        @default(true)
  public        Boolean?        @default(false)
  contentId     Int?
  userId        Int?
  Content       Content?        @relation(fields: [contentId], references: [id])
  User          User?           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PointReceived PointReceived[]
}

model ContentType {
  id        Int       @id @default(autoincrement())
  name      String?   @unique
  active    Boolean?  @default(true)
  Content   Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ContentImg {
  id        Int      @id @default(autoincrement())
  url       String?
  path      String?
  name      String?
  active    Boolean? @default(true)
  index     Boolean? @default(false)
  contentId Int?
  Content   Content? @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentStatus {
  id        Int       @id @default(autoincrement())
  name      String?
  active    Boolean?  @default(true)
  Content   Content[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PointReceived {
  id               Int                @id @default(autoincrement())
  point            Int?
  userId           Int?
  contentPublicId  Int?
  User             User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ContentPublic    ContentPublic?     @relation(fields: [contentPublicId], references: [id])
  PointReceivedPay PointReceivedPay[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model PointPay {
  id                Int                @id @default(autoincrement())
  point             Int?
  userId            Int?
  rewardId          Int?
  pointPayRequestId Int?
  User              User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Reward            Reward?            @relation(fields: [rewardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointPayRequest   PointPayRequest?   @relation(fields: [pointPayRequestId], references: [id])
  PointReceivedPay  PointReceivedPay[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model PointPayRequest {
  id        Int        @id @default(autoincrement())
  ticket    String     @unique
  approve   Boolean?   @default(false)
  active    Boolean?   @default(true)
  userId    Int?
  rewardId  Int?
  approveId Int?
  User      User?      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Reward    Reward?    @relation(fields: [rewardId], references: [id])
  PointPay  PointPay[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PointReceivedPay {
  id              Int            @id @default(autoincrement())
  pointPayId      Int?
  pointReceivedId Int?
  userId          Int?
  User            User?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointPay        PointPay?      @relation(fields: [pointPayId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointReceived   PointReceived? @relation(fields: [pointReceivedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Reward {
  id              Int               @id @default(autoincrement())
  ticket          String            @unique
  code            String?
  name            String?
  description     String?
  point           Int?              @default(0)
  active          Boolean?          @default(true)
  userId          Int?
  User            User?             @relation(fields: [userId], references: [id])
  RewardImg       RewardImg[]
  PointPay        PointPay[]
  PointPayRequest PointPayRequest[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model RewardImg {
  id        Int      @id @default(autoincrement())
  url       String?
  path      String?
  name      String?
  index     Boolean? @default(false)
  active    Boolean? @default(true)
  rewardId  Int?
  Reward    Reward?  @relation(fields: [rewardId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ButtonLink {
  id        Int      @id @default(autoincrement())
  ticket    String   @unique
  url       String   @unique
  remark    String?
  active    Boolean? @default(true)
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Department {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Position {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Booking {
  id              Int             @id @default(autoincrement())
  start           DateTime?
  end             DateTime?
  name            String?
  color           String?
  timed           Boolean?        @default(true)
  url             String?
  description     String?
  chairman        String?
  quantity        Int?
  meetingId       String?
  meetingPassword String?
  ApproveBy       Int?
  tel             String?
  meetingTypeId   Int?
  programId       Int?
  roomId          Int?
  statusId        Int?            @default(1)
  userId          Int?
  MeetingType     MeetingType?    @relation(fields: [meetingTypeId], references: [id])
  Program         Program?        @relation(fields: [programId], references: [id])
  Room            Room?           @relation(fields: [roomId], references: [id])
  Status          Status?         @relation(fields: [statusId], references: [id])
  User            User?           @relation(fields: [userId], references: [id])
  BookingDevice   BookingDevice[]
  BookingDrink    BookingDrink[]
  BookingFood     BookingFood[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Program {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model Status {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model MeetingType {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model BookingDevice {
  bookingId Int
  deviceId  Int
  Booking   Booking @relation(fields: [bookingId], references: [id])
  Device    Device  @relation(fields: [deviceId], references: [id])

  @@id([bookingId, deviceId])
}

model BookingFood {
  bookingId Int
  foodId    Int
  Booking   Booking @relation(fields: [bookingId], references: [id])
  Food      Food    @relation(fields: [foodId], references: [id])

  @@id([bookingId, foodId])
}

model BookingDrink {
  bookingId Int
  drinkId   Int
  Booking   Booking @relation(fields: [bookingId], references: [id])
  Drink     Drink   @relation(fields: [drinkId], references: [id])

  @@id([bookingId, drinkId])
}

model Room {
  id       Int       @id @default(autoincrement())
  name     String?
  quantity Int?
  color    String?
  Booking  Booking[]
}

model Device {
  id      Int             @id @default(autoincrement())
  name    String?
  Booking BookingDevice[]
}

model Food {
  id      Int           @id @default(autoincrement())
  name    String?
  Booking BookingFood[]
}

model Drink {
  id      Int            @id @default(autoincrement())
  name    String?
  Booking BookingDrink[]
}
