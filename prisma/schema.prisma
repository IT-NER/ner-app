generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  username     String      @unique
  password     String?
  lname        String?
  fname        String?
  status       Boolean     @default(true)
  departmentId Int?
  positionId   Int?
  roleId       Int?        @default(1)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  point        Int?        @default(0)
  img          String?
  Booking      Booking[]
  Department   Department? @relation(fields: [departmentId], references: [id])
  Position     Position?   @relation(fields: [positionId], references: [id])
  Role         Role?       @relation(fields: [roleId], references: [id])
}

model Role {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Department {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Position {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Booking {
  id              Int             @id @default(autoincrement())
  start           DateTime?
  end             DateTime?
  name            String?
  color           String?
  timed           Boolean?
  url             String?
  description     String?
  chairman        String?
  quantity        Int?
  meetingId       String?
  meetingPassword String?
  UserId          Int?
  ApproveBy       Int?
  MeetingTypeId   Int?
  RoomId          Int?
  ProgramId       Int?
  StatusId        Int?            @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  MeetingType     MeetingType?    @relation(fields: [MeetingTypeId], references: [id])
  Program         Program?        @relation(fields: [ProgramId], references: [id])
  Room            Room?           @relation(fields: [RoomId], references: [id])
  Status          Status?         @relation(fields: [StatusId], references: [id])
  User            User?           @relation(fields: [UserId], references: [id])
  BookingDevice   BookingDevice[]
  BookingDrink    BookingDrink[]
  BookingFood     BookingFood[]
}

model Program {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model Status {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model MeetingType {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model BookingDevice {
  BookingId Int
  DeviceId  Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Device    Device  @relation(fields: [DeviceId], references: [id])

  @@id([BookingId, DeviceId])
}

model BookingFood {
  BookingId Int
  FoodId    Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Food      Food    @relation(fields: [FoodId], references: [id])

  @@id([BookingId, FoodId])
}

model BookingDrink {
  BookingId Int
  DrinkId   Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Drink     Drink   @relation(fields: [DrinkId], references: [id])

  @@id([BookingId, DrinkId])
}

model Room {
  id       Int       @id @default(autoincrement())
  name     String?
  quantity Int?
  color    String?
  Booking  Booking[]
}

model Device {
  id      Int             @id @default(autoincrement())
  name    String?
  Booking BookingDevice[]
}

model Food {
  id      Int           @id @default(autoincrement())
  name    String?
  Booking BookingFood[]
}

model Drink {
  id      Int            @id @default(autoincrement())
  name    String?
  Booking BookingDrink[]
}

model Activity {
  id          Int           @id @default(autoincrement())
  code        Int           @unique
  start       DateTime?
  end         DateTime?
  title       String?
  subTitle    String?
  description String?
  show        Boolean?
  active      Boolean?      @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ActivityImg ActivityImg[]
}

model ActivityImg {
  id         Int       @id @default(autoincrement())
  activityId Int?
  path       String?
  name       String?
  Activity   Activity? @relation(fields: [activityId], references: [id])
}
