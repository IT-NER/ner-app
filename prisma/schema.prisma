generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  username     String   @unique
  password     String?
  lname        String?
  fname        String?
  active       Boolean? @default(true)
  point        Int?     @default(0)
  img          String?
  buttonLinkId Int?
  departmentId Int?
  positionId   Int?
  roleId       Int?     @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ButtonLink       ButtonLink?        @relation(fields: [buttonLinkId], references: [id])
  Department       Department?        @relation(fields: [departmentId], references: [id])
  Position         Position?          @relation(fields: [positionId], references: [id])
  Role             Role?              @relation(fields: [roleId], references: [id])
  Booking          Booking[]
  Content          Content[]
  Reward           Reward[]
  PointReceived    PointReceived[]
  PointPay         PointPay[]
  PointReceivedPay PointReceivedPay[]
}

model Content {
  id                Int       @id @default(autoincrement())
  start             DateTime?
  end               DateTime?
  timed             Boolean   @default(true)
  publish           Boolean   @default(false)
  ticket            String    @unique
  code              String?
  title             String?
  description       String?
  detail            String?   @db.VarChar(8000)
  point             Int?      @default(0)
  contentStatusId   Int?
  contentTypeId     Int?
  userId            Int?
  contentCoverImgId Int?
  active            Boolean?  @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  ContentStatus   ContentStatus?   @relation(fields: [contentStatusId], references: [id])
  ContentType     ContentType?     @relation(fields: [contentTypeId], references: [id])
  User            User?            @relation(fields: [userId], references: [id])
  ContentCoverImg ContentCoverImg? @relation(fields: [contentCoverImgId], references: [id])
  ContentImg      ContentImg[]
  PointReceived   PointReceived[]
}

model ContentStatus {
  id        Int      @id @default(autoincrement())
  name      String?
  active    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Content Content[]
}

model ContentType {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  active    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Content Content[]
}

model ContentCoverImg {
  id        Int      @id @default(autoincrement())
  name      String?  @unique
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Content Content[]
}

model ContentImg {
  id        Int      @id @default(autoincrement())
  url       String?
  path      String?
  name      String?
  index     Boolean? @default(false)
  contentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Content Content? @relation(fields: [contentId], references: [id])
}

model PointReceived {
  id        Int      @id @default(autoincrement())
  point     Int?
  userId    Int?
  contentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User             User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Content          Content?           @relation(fields: [contentId], references: [id])
  PointReceivedPay PointReceivedPay[]
}

model PointPay {
  id               Int       @id @default(autoincrement())
  point            Int?
  userId           Int?
  rewardId         Int?
  status           String?
  approveDate      DateTime?
  approveBy        Int?
  pointPayStatusId Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  User             User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Reward           Reward?            @relation(fields: [rewardId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointPayStatus   PointPayStatus?    @relation(fields: [pointPayStatusId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointReceivedPay PointReceivedPay[]
}

model PointPayStatus {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PointPay PointPay[]
}

model PointReceivedPay {
  id              Int      @id @default(autoincrement())
  pointPayId      Int?
  pointReceivedId Int?
  userId          Int?
  received        Int?
  pay             Int?
  total           Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  User          User?          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointPay      PointPay?      @relation(fields: [pointPayId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  PointReceived PointReceived? @relation(fields: [pointReceivedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Reward {
  id          Int      @id @default(autoincrement())
  ticket      String   @unique
  code        String?
  name        String?
  description String?  @db.VarChar(8000)
  point       Int?     @default(0)
  userId      Int?
  active      Boolean? @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User      User?       @relation(fields: [userId], references: [id])
  RewardImg RewardImg[]
  PointPay  PointPay[]
}

model RewardImg {
  id        Int      @id @default(autoincrement())
  url       String?
  path      String?
  name      String?
  index     Boolean? @default(false)
  rewardId  Int?
  active    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Reward Reward? @relation(fields: [rewardId], references: [id])
}

model ButtonLink {
  id        Int      @id @default(autoincrement())
  ticket    String   @unique
  url       String   @unique
  remark    String?
  active    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Role {
  id   Int     @id @default(autoincrement())
  name String?

  User User[]
}

model Department {
  id   Int     @id @default(autoincrement())
  name String?

  User User[]
}

model Position {
  id   Int     @id @default(autoincrement())
  name String?

  User User[]
}

model Booking {
  id              Int       @id @default(autoincrement())
  start           DateTime?
  end             DateTime?
  name            String?
  color           String?
  timed           Boolean?  @default(true)
  allDay          Boolean?  @default(false)
  url             String?
  description     String?
  chairman        String?
  quantity        Int?
  meetingId       String?
  meetingPassword String?
  ApproveBy       Int?
  tel             String?
  meetingTypeId   Int?
  programId       Int?
  roomId          Int?
  statusId        Int?      @default(1)
  userId          Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  MeetingType   MeetingType?    @relation(fields: [meetingTypeId], references: [id])
  Program       Program?        @relation(fields: [programId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Room          Room?           @relation(fields: [roomId], references: [id])
  Status        Status?         @relation(fields: [statusId], references: [id])
  User          User?           @relation(fields: [userId], references: [id])
  BookingDevice BookingDevice[]
  BookingDrink  BookingDrink[]
  BookingFood   BookingFood[]
}

model Program {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking[]
}

model Status {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking[]
}

model MeetingType {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking[]
}

model BookingDevice {
  bookingId Int
  deviceId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking @relation(fields: [bookingId], references: [id])
  Device  Device  @relation(fields: [deviceId], references: [id])

  @@id([bookingId, deviceId])
}

model BookingFood {
  bookingId Int
  foodId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking @relation(fields: [bookingId], references: [id])
  Food    Food    @relation(fields: [foodId], references: [id])

  @@id([bookingId, foodId])
}

model BookingDrink {
  bookingId Int
  drinkId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking @relation(fields: [bookingId], references: [id])
  Drink   Drink   @relation(fields: [drinkId], references: [id])

  @@id([bookingId, drinkId])
}

model Room {
  id        Int      @id @default(autoincrement())
  name      String?
  quantity  Int?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking Booking[]
}

model Device {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking BookingDevice[]
}

model Food {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking BookingFood[]
}

model Drink {
  id        Int      @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Booking BookingDrink[]
}
