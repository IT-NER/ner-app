generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  username     String      @unique
  password     String?
  lname        String?
  fname        String?
  status       Boolean     @default(true)
  departmentId Int?
  positionId   Int?
  roleId       Int?        @default(1)
  Department   Department? @relation(fields: [departmentId], references: [id])
  Position     Position?   @relation(fields: [positionId], references: [id])
  Role         Role?       @relation(fields: [roleId], references: [id])
  Booking      Booking[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Role {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Department {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Position {
  id   Int     @id @default(autoincrement())
  name String?
  User User[]
}

model Booking {
  id              Int             @id @default(autoincrement())
  start           DateTime?
  end             DateTime?
  name            String?
  color           String?
  timed           Boolean?
  url             String?
  description     String?
  chairman        String?
  quantity        Int?
  meetingId       String?
  meetingPassword String?
  UserId          Int?
  ApproveBy       Int? //อนุญาติโดย?
  MeetingTypeId   Int?
  RoomId          Int?
  ProgramId       Int?
  StatusId        Int?            @default(1)
  Program         Program?        @relation(fields: [ProgramId], references: [id])
  Status          Status?         @relation(fields: [StatusId], references: [id])
  MeetingType     MeetingType?    @relation(fields: [MeetingTypeId], references: [id])
  Room            Room?           @relation(fields: [RoomId], references: [id])
  User            User?           @relation(fields: [UserId], references: [id])
  BookingDevice   BookingDevice[]
  BookingFood     BookingFood[]
  BookingDrink    BookingDrink[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Program {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model Status {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model MeetingType {
  id      Int       @id @default(autoincrement())
  name    String?
  Booking Booking[]
}

model BookingDevice {
  BookingId Int
  DeviceId  Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Device    Device  @relation(fields: [DeviceId], references: [id])

  @@id([BookingId, DeviceId])
}

model BookingFood {
  BookingId Int
  FoodId    Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Food      Food    @relation(fields: [FoodId], references: [id])

  @@id([BookingId, FoodId])
}

model BookingDrink {
  BookingId Int
  DrinkId   Int
  Booking   Booking @relation(fields: [BookingId], references: [id])
  Drink     Drink   @relation(fields: [DrinkId], references: [id])

  @@id([BookingId, DrinkId])
}

model Room {
  id       Int       @id @default(autoincrement())
  name     String?
  quantity Int?
  color    String?
  Booking  Booking[]
}

model Device {
  id      Int             @id @default(autoincrement())
  name    String?
  Booking BookingDevice[]
}

model Food {
  id      Int           @id @default(autoincrement())
  name    String?
  Booking BookingFood[]
}

model Drink {
  id      Int            @id @default(autoincrement())
  name    String?
  Booking BookingDrink[]
}
